---
import { Icon } from "astro-icon/components";

interface TimelineItem {
	year: string;
	event: string;
	icon?: string;
}

interface Props {
	items: TimelineItem[];
}

const { items } = Astro.props;
---

<ul class="not-prose timeline timeline-vertical timeline-snap-icon max-w-4xl mx-auto my-8 px-4">
  {
    items.map((item, index) => (
      <li class="relative mb-12 last:mb-0">
        {index !== 0 && <hr class="bg-base-300 dark:bg-base-700" />}
        {index % 2 === 0 ? (
          <>
            <div class="timeline-start mb-4">
              <time class="font-mono text-lg font-semibold text-primary">{item.year}</time>
            </div>
            <div class="timeline-middle">
              <div class="bg-primary rounded-full p-1.5 shadow-lg shadow-primary/50">
                <Icon
                  name={item.icon || "lucide:check"}
                  class="w-5 h-5 text-primary-content"
                />
            </div>
          </div>
            <div class="timeline-end timeline-box bg-base-200 shadow-md hover:shadow-xl ease-in-out hover:-translate-y-1 transition-all duration-300">
              <p class="leading-relaxed">{item.event}</p>
  </div>
          </>
        ) : (
          <>
            <div class="timeline-start timeline-box bg-base-200 shadow-md hover:shadow-xl ease-in-out hover:-translate-y-1 transition-all duration-300">
              <p class="leading-relaxed">{item.event}</p>
</div>
            <div class="timeline-middle">
              <div class="bg-secondary rounded-full p-1.5 shadow-lg shadow-secondary/50">
                <Icon
                  name={item.icon || "lucide:check"}
                  class="w-5 h-5 text-secondary-content"
                />
              </div>
            </div>
            <div class="timeline-end mb-4">
              <time class="font-mono text-lg font-semibold text-secondary">{item.year}</time>
            </div>
          </>
        )}
        <hr class="bg-base-300 dark:bg-base-700" />
      </li>
    ))
  }
</ul>

<style>
  .timeline {
    position: relative;
  }

  .timeline-vertical {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
  }

  .timeline-snap-icon::before {
    content: "";
    position: absolute;
    height: 100%;
    width: 2px;
    background-color: var(--base-300, #e5e7eb);
    left: 50%;
    transform: translateX(-50%);
  }

  :global(.dark) .timeline-snap-icon::before {
    background-color: var(--base-700, #374151);
  }

  .timeline-start {
    grid-column: span 1;
    text-align: right;
    padding-right: 2rem;
  }

  .timeline-middle {
    grid-column: span 1;
    display: flex;
    justify-content: center;
  }

  .timeline-end {
    grid-column: span 1;
    padding-left: 2rem;
  }

  .timeline-box {
    border-radius: 0.75rem;
    padding: 1rem;
    background-color: var(--base-200, #f3f4f6);
  }

  li {
    margin-bottom: 0;
    }

  @media (max-width: 768px) {
    .timeline-vertical {
      display: grid;
      grid-template-columns: 1fr;
    }

    .timeline-start,
    .timeline-end {
      text-align: left;
      padding: 0 1rem;
    }

    .timeline-middle {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
    }

    .timeline-snap-icon::before {
      left: 1rem;
    }
  }
</style>

