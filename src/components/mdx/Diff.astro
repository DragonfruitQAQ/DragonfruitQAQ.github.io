---
interface Props {
	r: string | ImageMetadata; // right image
	l: string | ImageMetadata; // left image
	rightAlt?: string;
	leftAlt?: string;
}

const { r, l, rightAlt = "Right image", leftAlt = "Left image" } = Astro.props;

// Handle both string URLs and imported image objects
const rightSrc = typeof r === "string" ? r : r.src;
const leftSrc = typeof l === "string" ? l : l.src;
---

<div class="not-prose diff aspect-[16/9] rounded-lg overflow-hidden" data-fullscreen-container>
  <div class="diff-item-1">
    <img alt={leftAlt} src={leftSrc} loading="lazy" class="w-full h-full object-cover" />
  </div>
  <div class="diff-item-2">
    <img alt={rightAlt} src={rightSrc} loading="lazy" class="w-full h-full object-cover" />
  </div>
  <div class="diff-resizer">
    <div class="diff-resizer-line"></div>
    <div class="diff-resizer-circle"></div>
  </div>
  <button 
    class="diff-fullscreen-btn" 
    aria-label="Toggle fullscreen"
    data-fullscreen-btn
  >
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M8 3H5a2 2 0 0 0-2 2v3"></path>
      <path d="M21 8V5a2 2 0 0 0-2-2h-3"></path>
      <path d="M3 16v3a2 2 0 0 0 2 2h3"></path>
      <path d="M16 21h3a2 2 0 0 0 2-2v-3"></path>
    </svg>
  </button>
</div>
<style>
  .diff {
    position: relative;
    width: 100%;
    display: grid;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  .diff-item-1,
  .diff-item-2 {
    grid-area: 1/1;
    overflow: hidden;
    max-width: 100%;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  .diff-item-1 img,
  .diff-item-2 img {
    pointer-events: none;
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    -webkit-user-drag: none;
  }

  .diff-item-2 {
    clip-path: polygon(50% 0, 100% 0, 100% 100%, 50% 100%);
  }

  .diff-resizer {
    position: absolute;
    height: 100%;
    left: 50%;
    transform: translateX(-50%);
    cursor: ew-resize;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .diff-resizer-line {
    position: absolute;
    width: 3px;
    height: 100%;
    background-color: var(--primary, #3b82f6);
    left: 50%;
    transform: translateX(-50%);
    z-index: 1;
    }

  .diff-resizer-circle {
    position: relative;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid white;
    background-color: var(--primary, #3b82f6);
    box-shadow: 0 0 0 1px var(--primary, #3b82f6);
    z-index: 2;
    transition: transform 0.2s ease;
  }

  .diff:hover .diff-resizer-circle {
    transform: scale(1.1);
  }

  .diff.resizing {
    cursor: ew-resize;
  }

  .diff.resizing .diff-resizer-circle {
    transform: scale(1.2);
  }

  .diff-fullscreen-btn {
    position: absolute;
    top: 12px;
    right: 12px;
    width: 40px;
    height: 40px;
    border-radius: 6px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.2s ease, background-color 0.2s ease;
    z-index: 10;
  }

  .diff:hover .diff-fullscreen-btn {
    opacity: 1;
  }

  .diff-fullscreen-btn:hover {
    background-color: rgba(0, 0, 0, 0.9);
  }

  .diff.fullscreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    max-width: 100%;
    max-height: 100%;
    z-index: 9999;
    border-radius: 0;
    margin: 0;
  }

  .diff.fullscreen .diff-fullscreen-btn {
    opacity: 1;
  }

  .diff.fullscreen .diff-fullscreen-btn svg {
    transform: rotate(0.5turn);
  }
  
  /* 全屏时的样式 */
  .diff:-webkit-full-screen {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
    background-color: black; /* 添加背景色以确保在全屏时有合适的背景 */
  }
  
  .diff:-moz-full-screen {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
    background-color: black;
  }
  
  .diff:-ms-fullscreen {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
    background-color: black;
  }
  
  .diff:fullscreen {
    width: 100vw;
    height: 100vh;
    border-radius: 0;
    background-color: black;
  }
  
  /* 全屏时确保按钮可见 */
  .diff:-webkit-full-screen .diff-fullscreen-btn {
    opacity: 1;
  }
  
  .diff:-moz-full-screen .diff-fullscreen-btn {
    opacity: 1;
  }
  
  .diff:-ms-fullscreen .diff-fullscreen-btn {
    opacity: 1;
  }
  
  .diff:fullscreen .diff-fullscreen-btn {
    opacity: 1;
  }
</style>

<script>
  function initializeDiff() {
    const diffs = document.querySelectorAll('.diff');

    diffs.forEach(diff => {
      // Skip if already initialized
      if (diff.hasAttribute('data-diff-initialized')) return;
      diff.setAttribute('data-diff-initialized', 'true');

      const resizer = diff.querySelector('.diff-resizer') as HTMLElement;
      const item2 = diff.querySelector('.diff-item-2') as HTMLElement;
      const fullscreenBtn = diff.querySelector('[data-fullscreen-btn]') as HTMLButtonElement;

      if (!resizer || !item2) return;

      let isResizing = false;

      const startResizing = (e: MouseEvent | TouchEvent) => {
        e.preventDefault();
        isResizing = true;
        diff.classList.add('resizing');
      };

      const stopResizing = () => {
        isResizing = false;
        diff.classList.remove('resizing');
      };

      const resize = (e: MouseEvent | TouchEvent) => {
        if (!isResizing) return;
        e.preventDefault();

        let clientX;
        if (e instanceof MouseEvent) {
          clientX = e.clientX;
        } else if (e.touches && e.touches[0]) {
          clientX = e.touches[0].clientX;
        } else {
          return;
        }

        const diffRect = diff.getBoundingClientRect();
        const percentage = ((clientX - diffRect.left) / diffRect.width) * 100;
        const bounded = Math.max(0, Math.min(100, percentage));

        item2.style.clipPath = `polygon(${bounded}% 0, 100% 0, 100% 100%, ${bounded}% 100%)`;
        resizer.style.left = `${bounded}%`;
      };

      // Fullscreen functionality using the Fullscreen API
      const toggleFullscreen = async () => {
        try {
          if (!(document as any).fullscreenElement) {
            // Enter fullscreen
            if (diff.requestFullscreen) {
              await diff.requestFullscreen();
            } else if ((diff as any).webkitRequestFullscreen) {
              await (diff as any).webkitRequestFullscreen();
            } else if ((diff as any).mozRequestFullScreen) {
              await (diff as any).mozRequestFullScreen();
            } else if ((diff as any).msRequestFullscreen) {
              await (diff as any).msRequestFullscreen();
            }
            diff.classList.add('fullscreen');
          } else {
            // Exit fullscreen
            if (document.exitFullscreen) {
              await document.exitFullscreen();
            } else if ((document as any).webkitExitFullscreen) {
              await (document as any).webkitExitFullscreen();
            } else if ((document as any).mozCancelFullScreen) {
              await (document as any).mozCancelFullScreen();
            } else if ((document as any).msExitFullscreen) {
              await (document as any).msExitFullscreen();
            }
            diff.classList.remove('fullscreen');
          }
        } catch (error) {
          console.error('Error attempting to toggle fullscreen:', error);
        }
      };

      // Listen for fullscreen change events to handle ESC key
      const handleFullscreenChange = () => {
        if (!(document as any).fullscreenElement) {
          diff.classList.remove('fullscreen');
        }
      };

      document.addEventListener('fullscreenchange', handleFullscreenChange);
      document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
      document.addEventListener('mozfullscreenchange', handleFullscreenChange);
      document.addEventListener('MSFullscreenChange', handleFullscreenChange);

      // Event listeners for resizing
      resizer.addEventListener('mousedown', startResizing);
      document.addEventListener('mousemove', resize);
      document.addEventListener('mouseup', stopResizing);

      resizer.addEventListener('touchstart', startResizing);
      document.addEventListener('touchmove', resize);
      document.addEventListener('touchend', stopResizing);

      // Event listener for fullscreen
      if (fullscreenBtn) {
        fullscreenBtn.addEventListener('click', toggleFullscreen);
      }
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeDiff);
  } else {
    initializeDiff();
  }

  // Re-initialize after page transitions (for SPA-like behavior)
  document.addEventListener('astro:page-load', initializeDiff);
</script>