---
interface Tab {
	id: string;
	label: string;
	active?: boolean;
}

interface Props {
	tabs: Tab[];
	defaultTab?: string;
}

const { tabs, defaultTab } = Astro.props;
const activeTab =
	defaultTab || tabs.find((tab: Tab) => tab.active)?.id || tabs[0]?.id;
---

<div class="not-prose tabs-wrapper my-6">
  <div class="tabs-container">
    <div class="tabs-header">
      {tabs.map((tab) => (
        <button
          class={`tab-button ${tab.id === activeTab ? 'tab-active' : ''}`}
          data-tab={tab.id}
          type="button"
        >
          {tab.label}
        </button>
      ))}
    </div>

    <div class="tab-content">
      <div class={`tab-panel ${activeTab === 'tab1' ? 'active' : 'hidden'}`} data-panel="tab1">
        <slot name="tab1" />
      </div>
      <div class={`tab-panel ${activeTab === 'tab2' ? 'active' : 'hidden'}`} data-panel="tab2">
        <slot name="tab2" />
      </div>
      <div class={`tab-panel ${activeTab === 'tab3' ? 'active' : 'hidden'}`} data-panel="tab3">
        <slot name="tab3" />
      </div>
    </div>
  </div>
</div>

<style>
  .tabs-wrapper {
    background: var(--base-200, #f1f5f9);
    border-radius: 0.75rem;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .tabs-container {
    background: transparent;
  }

  .tabs-header {
    display: flex;
    background: transparent;
    padding: 0.75rem 0.75rem 0 0.75rem;
    gap: 0.25rem;
  }

  .tab-button {
    flex: 1;
    padding: 0.75rem 1.5rem;
    border: none;
    background: transparent;
    cursor: pointer;
    border-radius: 0.5rem;
    transition: all 0.3s ease;
    color: var(--base-content, #1e293b);
    font-weight: 500;
    font-size: 0.875rem;
    opacity: 0.5;
  }

  .tab-button:hover {
    background: var(--base-300, #e2e8f0);
    opacity: 0.8;
  }

  .tab-button.tab-active {
    background: var(--base-100, #ffffff);
    color: var(--primary, #3b82f6);
    opacity: 1;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .tab-content {
    padding: 0.75rem 1.5rem 1.5rem 1.5rem;
    background: transparent;
    color: var(--base-content, #1e293b);
  }

  .tab-panel {
    animation: fadeIn 0.3s ease-in-out;
  }

  .tab-panel.hidden {
    display: none;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Dark theme support */
  :global(.dark) .tabs-wrapper {
    background: var(--base-700, #374151);
  }

  :global(.dark) .tab-button {
    color: var(--base-200, #e5e7eb);
    opacity: 0.4;
  }

  :global(.dark) .tab-button:hover {
    background: var(--base-600, #4b5563);
    opacity: 0.7;
  }

  :global(.dark) .tab-button.tab-active {
    background: var(--base-800, #1f2937);
    color: var(--primary, #60a5fa);
  }

  :global(.dark) .tab-content {
    color: var(--base-200, #e5e7eb);
  }

  /* Focus state for accessibility */
  .tab-button:focus {
    outline: 2px solid var(--primary, #3b82f6);
    outline-offset: 2px;
  }

  /* Hover effect for entire wrapper */
  .tabs-wrapper:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  :global(.dark) .tabs-wrapper:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    .tabs-header {
      flex-direction: column;
      gap: 0.125rem;
      padding: 0.5rem;
    }

    .tab-button {
      text-align: left;
    }

    .tab-content {
      padding: 0.5rem 1rem 1rem 1rem;
    }
  }
</style>

<script>
  function initializeTabs() {
    const tabContainers = document.querySelectorAll('.tabs-wrapper');
    
    tabContainers.forEach(container => {
      if (container.hasAttribute('data-tabs-initialized')) return;
      container.setAttribute('data-tabs-initialized', 'true');
      
      const tabs = container.querySelectorAll('.tab-button');
      const panels = container.querySelectorAll('.tab-panel');

      tabs.forEach(tab => {
        tab.addEventListener('click', () => {
          const targetId = tab.getAttribute('data-tab');

          // Remove active class from all tabs and panels
          tabs.forEach(t => t.classList.remove('tab-active'));
          panels.forEach(p => {
            p.classList.add('hidden');
            p.classList.remove('active');
          });

          // Add active class to clicked tab and corresponding panel
          tab.classList.add('tab-active');
          const targetPanel = container.querySelector(`[data-panel="${targetId}"]`);
          if (targetPanel) {
            targetPanel.classList.remove('hidden');
            targetPanel.classList.add('active');
          }
        });
      });
    });
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeTabs);
  } else {
    initializeTabs();
  }

  // Re-initialize after page transitions
  document.addEventListener('astro:page-load', initializeTabs);
</script>
